<?xml version="1.0" encoding="utf-8" ?>
<ContentView xmlns="http://schemas.microsoft.com/dotnet/2021/maui"
             xmlns:x="http://schemas.microsoft.com/winfx/2009/xaml"
             xmlns:mct="http://schemas.microsoft.com/dotnet/2022/maui/toolkit"
             xmlns:local="clr-namespace:LMKit.Maestro"
             xmlns:ui="clr-namespace:LMKit.Maestro.UI"
             xmlns:razor="clr-namespace:LMKit.Maestro.UI.Razor.Components"
             xmlns:models="clr-namespace:LMKit.Maestro.Models"
             xmlns:vm="clr-namespace:LMKit.Maestro.ViewModels"
             xmlns:controls="clr-namespace:LMKit.Maestro.Controls"
             xmlns:converters="clr-namespace:LMKit.Maestro.Converters"
             xmlns:services="clr-namespace:LMKit.Maestro.Services"
             x:Class="LMKit.Maestro.UI.ChatView"
             x:DataType="vm:ConversationViewModel"
             IsEnabled="{Binding ., Converter={mct:IsNotNullConverter}}"
             x:Name="chatView"
             >

    <ContentView.Resources>
        <ResourceDictionary>
            <Style x:Key="SubmitButtonStyle" TargetType="Button">
                <Setter Property="WidthRequest" Value="32"/>
                <Setter Property="HeightRequest" Value="32"/>
                <Setter Property="CornerRadius" Value="16"/>
                <Setter Property="BorderWidth" Value="0"/>
                <Setter Property="Padding" Value="0"/>
                <Setter Property="VerticalOptions" Value="End"/>
                <Setter Property="FontFamily" Value="Material"/>
                <Setter Property="BackgroundColor" Value="{StaticResource Surface4}"/>
                <Setter Property="TextColor" Value="{StaticResource OnSurface}"/>
                <Setter Property="VisualStateManager.VisualStateGroups">
                    <VisualStateGroupList>
                        <VisualStateGroup x:Name="CommonStates">
                            <VisualState x:Name="Normal" >
                                <VisualState.Setters>
                                </VisualState.Setters>
                            </VisualState>
                            <VisualState x:Name="Disabled">
                                <VisualState.Setters>
                                    <Setter Property="TextColor" Value="{StaticResource Surface}" />
                                </VisualState.Setters>
                            </VisualState>
                            <VisualState x:Name="Pressed">
                                <VisualState.Setters>
                                </VisualState.Setters>
                            </VisualState>
                            <VisualState x:Name="Hover">
                                <VisualState.Setters>
                                    <Setter Property="BackgroundColor" Value="{StaticResource Surface4}" />
                                </VisualState.Setters>
                            </VisualState>
                        </VisualStateGroup>
                    </VisualStateGroupList>
                </Setter>
            </Style>
        </ResourceDictionary>
    </ContentView.Resources>

    <Grid RowDefinitions="*, auto, 32">
        <Grid ZIndex="1" BackgroundColor="{StaticResource Background}" IsVisible="{Binding IsInitialized, Converter={mct:InvertedBoolConverter}}">
            <VerticalStackLayout Spacing="12" HorizontalOptions="Center" VerticalOptions="Center">
                <Label TextColor="{StaticResource OutlineVariant}" Text="Loading chat history..."/>
                <ActivityIndicator IsRunning="True" Color="{StaticResource OutlineVariant}" WidthRequest="16" HeightRequest="16"/>
            </VerticalStackLayout>
        </Grid>

        <!-- Message history Blazor view -->
        <BlazorWebView x:Name="blazorWebView" HostPage="wwwroot/index.html">
            <BlazorWebView.RootComponents>
                <RootComponent Selector="#app" ComponentType="{x:Type razor:Chat}" />
            </BlazorWebView.RootComponents>
        </BlazorWebView>

        <!-- Chat input -->
        <Border  
            BackgroundColor="{StaticResource Surface}"
            MaximumWidthRequest="800"
            Focused="OnEntryBorderFocused"
            Unfocused="OnEntryBorderUnfocused"
            Padding="12, 0"
            StrokeThickness="1"
            MinimumHeightRequest="{x:Static local:AppConstants.ModelSelectionButtonHeight}"
            StrokeShape="RoundRectangle 32"
            Grid.Row="1">
            <Border.Triggers>
                <DataTrigger TargetType="Border" Binding="{Binding Source={x:Reference chatView}, Path=ChatEntryIsFocused, x:DataType=ui:ChatView}" Value="True">
                    <Setter Property="Stroke" Value="{StaticResource Surface4}"/>
                </DataTrigger>
                <DataTrigger TargetType="Border" Binding="{Binding Source={x:Reference chatView}, Path=ChatEntryIsFocused, x:DataType=ui:ChatView}" Value="False">
                    <Setter Property="Stroke" Value="{StaticResource Background}"/>
                </DataTrigger>
            </Border.Triggers>

            <Grid ColumnSpacing="16" ColumnDefinitions="*, auto">
                <controls:ChatBoxEditor
                    Margin="0, 10, 0, 10"
                    AutoSize="TextChanges"
                    EntryKeyReleased="OnEntryKeyReleased"
                    MaximumHeightRequest="200"
                    x:Name="chatBoxEditor"
                    BackgroundColor="Transparent"
                    Text="{Binding InputText, Mode=TwoWay}"/>

                <Button 
                    Grid.Column="1" 
                    StyleClass="Icon"
                    Margin="0, 0, 0, 10"
                    Text="{StaticResource Arrow_upward}"
                    Style="{StaticResource SubmitButtonStyle}"
                    >

                    <Button.Triggers>
                        <DataTrigger TargetType="Button" Binding="{Binding ., Converter={mct:IsNullConverter}}" Value="True">
                            <Setter Property="IsEnabled" Value="False"/>
                        </DataTrigger>

                        <DataTrigger TargetType="Button" Binding="{Binding AwaitingResponse}" Value="False">
                            <Setter Property="Command" Value="{Binding SubmitCommand}"/>
                            <Setter Property="IsEnabled" Value="{Binding InputText, Converter={mct:IsStringNotNullOrWhiteSpaceConverter}}"/>
                        </DataTrigger>

                        <DataTrigger TargetType="Button" Binding="{Binding AwaitingResponse}" Value="True">
                            <Setter Property="Text" Value="{StaticResource Stop}"/>
                            <Setter Property="Command" Value="{Binding CancelCommand}"/>
                            <Setter Property="IsEnabled" Value="True"/>
                        </DataTrigger>
                    </Button.Triggers>
                </Button>
            </Grid>
        </Border>

        <!-- Last loaded model info -->
        <Grid 
            MaximumWidthRequest="800"
            IsVisible="False" 
            HorizontalOptions="Center"
            VerticalOptions="Center" 
            Margin="16, 0"
            x:DataType="{x:Null}"
            Grid.Row="2">
            <Grid.Triggers>
                <DataTrigger Value="True" TargetType="Grid">
                    <DataTrigger.Binding>
                        <MultiBinding Converter="{StaticResource AllTrueConverter}">
                            <Binding Source="{RelativeSource AncestorType={x:Type vm:AppShellViewModel}}" Path="AppIsInitialized"/>
                            <Binding Source="{RelativeSource AncestorType={x:Type vm:ConversationViewModel}}" Path="IsInitialized"/>
                            <Binding Source="{RelativeSource AncestorType={x:Type vm:ConversationViewModel}}" Path="LastUsedModel" Converter="{mct:IsNotNullConverter}"/>
                            <Binding Source="{RelativeSource AncestorType={x:Type vm:ChatPageViewModel}}" Path="LMKitService.ModelLoadingState" Converter="{mct:IsEqualConverter}" ConverterParameter="{x:Static services:LMKitModelLoadingState.Unloaded}"/>
                        </MultiBinding>
                    </DataTrigger.Binding>
                    <Setter Property="IsVisible" Value="True"/>
                </DataTrigger>

                <DataTrigger Value="True" TargetType="Grid">
                    <DataTrigger.Binding>
                        <MultiBinding Converter="{StaticResource AllTrueConverter}">
                            <Binding Source="{RelativeSource AncestorType={x:Type vm:AppShellViewModel}}" Path="AppIsInitialized"/>
                            <Binding Path="UsedDifferentModel"/>
                            <Binding Source="{RelativeSource AncestorType={x:Type vm:ChatPageViewModel}}" Path="LMKitService.ModelLoadingState" Converter="{mct:IsEqualConverter}" ConverterParameter="{x:Static services:LMKitModelLoadingState.Loaded}"/>
                        </MultiBinding>
                    </DataTrigger.Binding>
                    <Setter Property="IsVisible" Value="True"/>
                </DataTrigger>
            </Grid.Triggers>

            <controls:StatefulContentView
                TappedCommand="{Binding Source={RelativeSource AncestorType={x:Type vm:ChatPageViewModel}}, Path=ModelListViewModel.LoadModelCommand}"
                CommandParameter="{Binding LastUsedModel}"
                ToolTipProperties.Text="Click to reload this model">
                <VisualStateManager.VisualStateGroups>
                    <VisualStateGroupList>
                        <VisualStateGroup x:Name="CommonStates">
                            <VisualState x:Name="Normal" />
                            <VisualState x:Name="Pressed">
                                <VisualState.Setters>
                                    <Setter TargetName="reloadLabel" Property="Label.TextColor" Value="{StaticResource OnSurface}"/>
                                    <Setter TargetName="reloadIcon" Property="Label.TextColor" Value="{StaticResource OnSurface}"/>
                                    <Setter Property="Opacity" Value="0.8"/>
                                </VisualState.Setters>
                            </VisualState>
                            <VisualState x:Name="PointerOver">
                                <VisualState.Setters>
                                    <Setter TargetName="reloadLabel" Property="Label.TextColor" Value="{StaticResource OnSurface}"/>
                                    <Setter TargetName="reloadIcon" Property="Label.TextColor" Value="{StaticResource OnSurface}"/>
                                    <Setter TargetName="reloadIcon" Property="IsVisible" Value="True"/>
                                </VisualState.Setters>
                            </VisualState>
                        </VisualStateGroup>
                    </VisualStateGroupList>
                </VisualStateManager.VisualStateGroups>

                <Grid>
                    <Label 
                        x:Name="reloadLabel" 
                        VerticalOptions="Center"
                        LineBreakMode="HeadTruncation"
                        StyleClass="Subtitle"
                        FontSize="13"
                        TextColor="{StaticResource Outline}"
                        Text="{Binding LastUsedModel, Converter={converters:FileNameConverter}, StringFormat='{}This chat last used \'{0}\''}"/>

                    <Label 
                        x:Name="reloadIcon"
                        Margin="2, 0"
                        IsVisible="False"
                        TranslationX="{Binding Source={x:Reference reloadLabel}, Path=Width}"
                        VerticalOptions="Center"
                        TextColor="{StaticResource Outline}" 
                        StyleClass="IconSmall"
                        Text="{StaticResource Rotate_right}"
                        />
                </Grid>
            </controls:StatefulContentView>
        </Grid>
    </Grid>
</ContentView>
