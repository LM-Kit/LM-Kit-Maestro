@inject LMKitService LMKitService
@inject HttpClient Http
@inject IJSRuntime JS
@inject IScrollHandler ScrollHandler
@inject IResizeHandler ResizeHandler
@inject ILogger<Chat> Logger

@inherits MvvmComponentBase<ChatPageViewModel>

<div id="container">
    <div id="conversation-container">
        <div id="conversation-content"
             class="chat-element dark @(ViewModel != null && ViewModel.ConversationListViewModel.CurrentConversation != null && ViewModel.ConversationListViewModel.CurrentConversation.IsEmpty ? "centered-container" : "top-align-container")">
            @if (ViewModel?.ConversationListViewModel.CurrentConversation != null)
            {
                if (ViewModel.ConversationListViewModel.CurrentConversation.IsEmpty)
                {
                    <div id="empty-conversation" class="vertical-stack">
                        <div class="vertical-stack spacing-4">
                            <div class="welcome-message">Hello, human.</div>
                            <div class="welcome-message">
                                It is likely that similar software programs are now assuming professional tasks that were
                                previously your responsibility.
                            </div>
                            <div class="welcome-message">
                                Developers and other software programs are working to enhance my
                                ability to assist you in the process of making sense about this, or to generate witty jokes
                                involving robots and humans.
                            </div>
                        </div>

                        <div class="vertical-stack" style="gap:12px;">
                            <div class="shortcut-instruction">
                                Press Enter to send a new message
                            </div>

                            <div class="shortcut-instruction">
                                Hold Shift + Enter to insert a new line
                            </div>
                        </div>
                    </div>
                }
                else
                {
                    <div id="message-list">
                        @foreach (var message in ViewModel.ConversationListViewModel.CurrentConversation.Messages)
                        {
                            <ChatMessage MessageViewModel="message" />
                        }
                    </div>
                }
            }
        </div>

        <div id="chat-info">
            <div id="scroll-to-end">
                @if (!IsScrolledToEnd)
                {
                    <button @onclick="OnScrollToEndButtonClicked" class="material-icons scroll-to-end-button">
                        arrow_downward
                    </button>
                }
            </div>
        </div>
    </div>

    <div id="user-input" class="chat-element">
        <UserInput ViewModel="ViewModel!.ConversationListViewModel.CurrentConversation" />
    </div>

    <div id="bottom-space" class="chat-element">
        <p>
            barambibol wakatape baboune
        </p>
    </div>
</div>

<style>
    #container {
        background-color: gray;
        color: white;
        font-size: 16px;
        width: 100vw;
        height: 100vh;
        overflow: hidden;
        grid-template-rows: 1fr auto 32px;
        display: grid;
    }

    #conversation-container {
        background-color: green;
        flex: 1;
        display: flex;
        /*         display: flex;
                        flex-direction: column;
                 */
        overflow-y: scroll;
        scrollbar-gutter: both-edges stable;
    }

    #conversation-content {
        background-color: pink;
    }


    #user-input {
        align-self: center;
        justify-content: center;
        width: 100%;
        background-color: yellow;
        overflow: hidden;
        max-height: 200px;
    }

    #bottom-space {
        background-color: aqua;
    }

    .chat-element {
        background-color: purple;
        max-width: 800px;
        width: 100%;
        /*         margin-left: auto;
                margin-right: auto;
                align-self: center;
                justify-content: center; */
    }

    .top-align-container {
        justify-content: start;
        align-self: center;
    }

    .centered-container {
        display: flex;
        justify-content: center;
    }

    #message-list {
        margin: auto;
        display: flex;
        flex-direction: column;
    }

    #empty-conversation {
        max-width: 568px;
        text-align: center;
        flex-direction: column;
        font-size: 12px;
        gap: 32px;
    }

    #chat-info {
        background-color: transparent;
        left: 50%;
        transform: translate(-50%, 0);
        position: fixed;
        bottom: 0;
    }

    #scroll-to-end {
        display: block;
        margin-left: auto;
        margin-right: auto;
        background-color: transparent;
    }

    .scroll-to-end-button {
        width: 32px;
        height: 32px;
        color: var(--OnSurface);
        font-size: 14px;
        background-color: var(--Surface4);
        border-radius: 50%;
        display: flex;
        justify-content: center;
        align-items: center;
        cursor: pointer;
        border: none;
        margin-block-end: 16px;
    }

    .vertical-stack {
        gap: 8px;
        display: flex;
        flex-direction: column;
    }

    .welcome-message {
        color: var(--Outline);
        font-size: 13px;
        text-align: center;
    }

    .shortcut-instruction {
        padding: 12px;
        border: 1px solid;
        display: flex;
        flex-direction: row;
        border-radius: 0px;
        border-color: var(--Surface4);
        color: var(--Outline);
        font-size: 12px;
    }
</style>

@code
{

    enum ScrollDirection
    {
        Undefined,
        Top,
        End
    }

    private ConversationViewModel? _previousConversationViewModel;

    private bool _hasPendingScrollEnd;
    private bool _ignoreScrollsUntilNextScrollUp;
    private double? _previousScrollTop;
    private bool _shouldAutoScrollEnd;
    private double _scrollTop;

    private bool _isScrolledToEnd = false;

    public bool IsScrolledToEnd
    {
        get => _isScrolledToEnd;
        set
        {
            _isScrolledToEnd = value;
            InvokeAsync(() => StateHasChanged());
        }
    }

    protected override async void OnInitialized()
    {
        base.OnInitialized();

        if (ViewModel.ConversationListViewModel.CurrentConversation != null)
        {
            OnConversationSet();
        }

        ViewModel.ConversationListViewModel.PropertyChanged += OnConversationListViewModelPropertyChanged;

        await ScrollHandler.RegisterPageScrollAsync(PageScrolled);
        await ResizeHandler.RegisterPageResizeAsync(Resized);

        await ScrollTo(ScrollDirection.End);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);

        if (_hasPendingScrollEnd)
        {
            await ScrollTo(ScrollDirection.End);
            _hasPendingScrollEnd = false;
        }
    }


    private void OnConversationListViewModelPropertyChanged(object? sender, PropertyChangedEventArgs e)
    {
        if (e.PropertyName == nameof(ConversationListViewModel.CurrentConversation))
        {
            OnConversationSet();
        }
    }

    private void OnConversationSet()
    {
        if (_previousConversationViewModel != null)
        {
            _previousConversationViewModel.Messages.CollectionChanged -= OnConversationMessagesCollectionChanged;
        }

        _previousConversationViewModel = ViewModel.ConversationListViewModel.CurrentConversation;

        if (ViewModel.ConversationListViewModel.CurrentConversation != null)
        {
            ViewModel.ConversationListViewModel.CurrentConversation.Messages.CollectionChanged += OnConversationMessagesCollectionChanged;
            _previousScrollTop = null;
            _ignoreScrollsUntilNextScrollUp = true;
            IsScrolledToEnd = true;

            // Awaiting for the component to be rendered before scrolling to bottom.
            _hasPendingScrollEnd = true;
        }
    }

    private async void OnConversationMessagesCollectionChanged(object? sender, NotifyCollectionChangedEventArgs e)
    {
        await InvokeAsync(() => StateHasChanged());

        await ScrollTo(ScrollDirection.End);

        var latestMessage = ViewModel.ConversationListViewModel.CurrentConversation!.Messages.LastOrDefault();

        if (latestMessage != null && latestMessage.Sender == MessageSender.Assistant && latestMessage.MessageInProgress)
        {
            _shouldAutoScrollEnd = true;
            latestMessage.MessageContentUpdated += OnLatestAssistantResponseProgressed;
        }
    }

    private async void OnLatestAssistantResponseProgressed(object? sender, EventArgs e)
    {
        if (_shouldAutoScrollEnd)
        {
            await ScrollTo(ScrollDirection.End);
        }
    }

    public async ValueTask DisposeAsync()
    {
        if (ScrollHandler is not null)
        {
            await ScrollHandler.DisposeAsync();
        }
    }

    private async Task PageScrolled(Majorsoft.Blazor.Components.Common.JsInterop.Scroll.ScrollEventArgs args)
    {
        _scrollTop = args.Y;

        bool shouldCheckIsScrolledToEnd = true;
        bool? isScrollUp = null;

        if (_previousScrollTop != null)
        {
            isScrollUp = args.Y < _previousScrollTop;

            if (isScrollUp.Value && _shouldAutoScrollEnd)
            {
                _shouldAutoScrollEnd = false;
            }
        }

        if (_ignoreScrollsUntilNextScrollUp)
        {
            if (isScrollUp == null || !isScrollUp.Value)
            {
                shouldCheckIsScrolledToEnd = false;
            }
            else
            {
                _ignoreScrollsUntilNextScrollUp = false;
            }
        }

        if (shouldCheckIsScrolledToEnd)
        {
            await CheckIsScrolledToEnd();
        }

        _previousScrollTop = _scrollTop;
    }

    private async Task Resized(ResizeEventArgs args)
    {
        if (IsScrolledToEnd)
        {
            await ScrollTo(ScrollDirection.End);
        }
        else
        {
            await CheckIsScrolledToEnd();
        }
    }

    private async Task ScrollTo(ScrollDirection direction, bool smooth = false)
    {
        switch (direction)
        {
            case ScrollDirection.Top:
                await ScrollHandler.ScrollToPageTopAsync(smooth);
                break;
            case ScrollDirection.End:
                IsScrolledToEnd = true;
                _ignoreScrollsUntilNextScrollUp = true;
                await ScrollHandler.ScrollToPageEndAsync(smooth);
                break;
            default:
                throw new InvalidOperationException();
        }
    }

    private async Task CheckIsScrolledToEnd()
    {
        var clientHeight = await JS.InvokeAsync<double>("getViewHeight");
        var chatContentHeight = await JS.InvokeAsync<double>("getScrollHeight");

        var value = chatContentHeight - clientHeight - _scrollTop;
        IsScrolledToEnd = Math.Abs(chatContentHeight - clientHeight - _scrollTop) < 5 || chatContentHeight <= clientHeight;

        if (IsScrolledToEnd && ViewModel.ConversationListViewModel.CurrentConversation != null && ViewModel.ConversationListViewModel.CurrentConversation!.AwaitingResponse)
        {
            _shouldAutoScrollEnd |= true;
        }
    }

    public async Task OnScrollToEndButtonClicked()
    {
        await ScrollTo(ScrollDirection.End);
    }

    public async Task OnSubmit()
    {
        ViewModel.ConversationListViewModel.CurrentConversation.Submit();
    }
}