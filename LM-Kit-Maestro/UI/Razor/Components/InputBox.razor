@inject IJSRuntime JS

<div id="inputbox-container">
    <textarea id="input-box"
    readonly=@Readonly
    @bind="InputText"
    @bind:event="oninput"
    @onchange="OnInputChange"
    placeholder="Enter text here..."></textarea>
</div>

<style>
    #input-box {
    overflow: hidden;
    }
</style>

<script>
    function resizeUserInput() {
    const inputbox = document.getElementById('input-box');
    inputbox.style.height = "";
    inputbox.style.height = inputbox.scrollHeight + "px";
    }
</script>

@code {
    private bool _shouldResizeTextarea;

    [Parameter] public required bool Readonly { get; set; }

    [Parameter] public EventCallback<bool> ReadonlyChanged { get; set; }

    [Parameter] public required string InputText { get; set; }

    [Parameter] public EventCallback<string> InputTextChanged { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (_shouldResizeTextarea)
        {
            _shouldResizeTextarea = false;
            await JS.InvokeVoidAsync("resizeUserInput");
        }
    }

    private async Task OnInputTextChanged(string newValue)
    {
        InputText = newValue;

        // Notify parent about the change
        await InputTextChanged.InvokeAsync(InputText);

        // Resize the textarea
        _shouldResizeTextarea = true;

        // Trigger re-render to resize the textarea after text update
        StateHasChanged();
    }

    private void OnInputChange(ChangeEventArgs changeEventArgs)
    {
        _shouldResizeTextarea = true;
    }
}