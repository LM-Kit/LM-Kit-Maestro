@inject IClipboardHandler ClipboardHandler

<div id="container" class="dark">
    <div id="translation-container">
        <div id="translation-header">
            <div>
                <MudSelect Underline="false" class="language-select" @bind-Value="TranslationViewModel.InputLanguage">
                    @foreach (var language in GetAvailableLanguages(true))
                    {
                        if (language == Language.Undefined)
                        {
                            <MudSelectItem Value="Language.Undefined">Automatically detect</MudSelectItem>
                        }
                        else
                        {
                            <MudSelectItem Value="@language">@language</MudSelectItem>
                        }
                    }
                </MudSelect>
            </div>

            <button  class="chatActionButton material-icons small">
                swap_horiz
            </button>

            <div>
                <MudSelect Underline="false" class="language-select" @bind-Value="TranslationViewModel.OutputLanguage">
                    @foreach (var language in GetAvailableLanguages(false))
                    {
                        <MudSelectItem Value="@language">@language</MudSelectItem>

                    }
                </MudSelect>
            </div>

            @*                 <MudSelect class="language-select" @bind-Value="TranslationViewModel.Language">
                    @foreach (var language in Enum.GetValues<Language>())
                    {
                        <MudSelectItem Value="@language">@language</MudSelectItem>

                    }
                </MudSelect> *@

            @* 
                <div class="language-select">
                    <label for="input-language">Input Language:</label>
                    <select id="input-language" @bind="TranslationViewModel.Language" class="multi-column-dropdown">
                        @foreach (var language in Enum.GetValues<Language>())
                        {
                            <option value="@language">@language</option>
                        }
                    </select>

                </div> *@
        </div>

        <div id="translation-body">
            <div id="translation-input">
                <InputBox @bind-InputText="TranslationViewModel.InputText" />
            </div>

            <div id="translation-output">
                <InputBox @bind-InputText="TranslationViewModel.LatestResult" Readonly="true" />
            </div>
        </div>
    </div>
</div>

<style>
    #loaderDiv {
        display: flex;
        height: 72px;
        background-color: transparent;
        align-items: center;
        align-content: center;
        justify-content: center;
    }

    #container {
        width: 100%;
        padding-inline: 8px;
        padding-block: 8px;
        overflow-y: auto;
    }

    /*         #result:hover {
            background-color: var(--Surface3);
            } */

    #translation-container {
        display: flex;
        border: 1px solid var(--OutlineVariant);
        border-radius: 8px;
        overflow: hidden;
        display: grid;
        grid-template-rows: 40px auto;
    }

    #translation-input, #translation-output {
        flex: 1;
        display: flex;
        flex-direction: column;
    }

    #translation-header {
        display: flex;
        border-bottom: 1px solid var(--OutlineVariant);
        justify-content: space-between;
    }

    #translation-body {
        grid-template-columns: 1fr 1fr;
        display: grid;
    }

</style>

@code
{
    // Using a timer to automatically refresh translation result when no user input is detected for a given time span.
    private Timer? _inputTimer;

    bool resultJustCopied;
    bool ResultJustCopied
    {
        get => resultJustCopied;
        set
        {
            resultJustCopied = value;
            InvokeAsync(() => StateHasChanged());
        }
    }

    [Parameter] public EventCallback OnSubmit { get; set; }

    [Parameter] public required TranslationViewModel TranslationViewModel { get; set; }

    [Parameter] public EventCallback<AssistantViewModelBase> TranslationViewModelChanged { get; set; }

    protected override void OnParametersSet()
    {
        base.OnParametersSet();

        TranslationViewModel.PropertyChanged += OnTranslationViewModelPropertyChanged;
    }

    private async Task OnCopyResultButtonClicked()
    {
        bool success = await ClipboardHandler.CopyTextToClipboardAsync(TranslationViewModel.LatestResult != null ? TranslationViewModel.LatestResult : "");

        if (success)
        {
            if (!ResultJustCopied)
            {
                var _ = Task.Run(async () =>
                {
                    ResultJustCopied = true;
                    await Task.Delay(3000);
                    ResultJustCopied = false;
                });
            }
        }
    }

    private void OnTranslationViewModelPropertyChanged(object? sender, PropertyChangedEventArgs e)
    {
        if (e.PropertyName == nameof(TranslationViewModel.InputText))
        {
            _inputTimer?.Change(Timeout.Infinite, Timeout.Infinite);
            _inputTimer = new Timer(OnDebounceTimerElapsed, null, 1000, Timeout.Infinite);
        }

        InvokeAsync(() => StateHasChanged());
    }

    private void OnDebounceTimerElapsed(object? state)
    {
        _inputTimer?.Change(Timeout.Infinite, Timeout.Infinite);
        TranslationViewModel.Submit();
    }

    private static List<Language> GetAvailableLanguages(bool inputLanguage)
    {
        var values = Enum.GetValues<Language>().Skip(1).ToList();

        values.Sort();

        if (inputLanguage)
        {
            values.Insert(0, Language.Undefined);
        }

        return values;
    }

}
