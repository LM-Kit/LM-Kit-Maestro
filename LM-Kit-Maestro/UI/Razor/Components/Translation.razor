@inject IClipboardHandler ClipboardHandler

<div style="width:100vw; height:100vh; margin-top: 40px;padding: 20px">
    <div id="container" class="dark">
        <div class="card">
            @if (TranslationViewModel.AwaitingResponse)
            {
                <div id="loaderDiv">
                    <div class="spinner">
                        <div> </div>
                        <div> </div>
                        <div> </div>
                        <div> </div>
                    </div>
                </div>
            }
            else if (TranslationViewModel.LastTranslationIsSuccesful.HasValue)
            {
                if (TranslationViewModel.LastTranslationIsSuccesful.Value)
                {
                    <div id="result">
                        <p>
                            @TranslationViewModel.LatestResult
                        </p>

                        <div id="actionIcons">
                            <button @onclick="OnCopyResultButtonClicked" class="chatActionButton material-icons">
                                @(ResultJustCopied ? "check" : "content_copy")
                            </button>

                        </div>
                    </div>

                }
                else
                {
                    <p>
                        error
                    </p>
                }
            }

            <UserInput ViewModel="TranslationViewModel" />
        </div>
    </div>
</div>

<style>
    #loaderDiv {
        display: flex;
        height: 72px;
        background-color: transparent;
        align-items: center;
        align-content: center;
        justify-content: center;
    }

    #container {
        max-width: 800px;
        display: flex;
        align-items: center;
    }

    #card {
        width: 100%;
        padding: 20px;
        border: 1px solid var(--Surface4);
        border-radius: 4px;
    }

    #result {
        margin-block: 16px;
        background-color: var(--Surface15);
        color: white;
        min-height: 72px;
        margin-top: 10px;
        padding: 10px;
    }

    /*         #result:hover {
                                background-color: var(--Surface3);
                                } */
</style>

@code
{
    bool resultJustCopied;
    bool ResultJustCopied
    {
        get => resultJustCopied;
        set
        {
            resultJustCopied = value;
            InvokeAsync(() => StateHasChanged());
        }
    }

    TranslationViewModel? translationViewModel;
    [Parameter]
    [EditorRequired]
#pragma warning disable BL0007
    public TranslationViewModel TranslationViewModel
    {
        get => translationViewModel!;
        set
        {
            translationViewModel = value;
            InvokeAsync(() => StateHasChanged());
        }
    }
#pragma warning restore BL0007

    private async Task OnCopyResultButtonClicked()
    {
        bool success = await ClipboardHandler.CopyTextToClipboardAsync(TranslationViewModel.LatestResult != null ? TranslationViewModel.LatestResult : "");

        if (success)
        {
            if (!ResultJustCopied)
            {
                var _ = Task.Run(async () =>
                {
                    ResultJustCopied = true;
                    await Task.Delay(3000);
                    ResultJustCopied = false;
                });
            }
        }
    }
}