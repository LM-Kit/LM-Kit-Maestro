@inherits MvvmComponentBase<AssistantsPageViewModel>

<div style="width:100vw; height:100vh; margin-top: 40px;padding: 20px">
    <div id="container" class="dark container">
        <div id="card">
            <textarea id="input" />

            <div id="buttonsDiv">
                <button class="primary-button fa-xs fa-solid fa-play" @onclick="OnTranslateButtonClicked"></button>
            </div>

            @if (IsProcessing)
            {
                <div id="loaderDiv">
                    <div class="spinner">
                        <div> </div>
                        <div> </div>
                        <div> </div>
                        <div> </div>
                    </div>
                </div>
            }

            @if (!string.IsNullOrEmpty(ViewModel.Result))
            {
                <div id="result">
                    @ViewModel.Result
                </div>
            }
        </div>
    </div>
</div>

<style>
    .dark {
        --Primary: #512BD4;
        --PrimaryAccent: #3100AF;
        --Error: #BB3D36;
        --Background: #12181F;
        --OnBackground: #F0F6FC;
        --Surface: #06080A;
        --Surface15: #0C1014;
        --Surface2: #12181F;
        --Surface3: #182129;
        --Surface4: #1F2933;
        --OnSurface: #F0F6FC;
        --Outline: #9198A1;
        --OutlineVariant: #2E3033;
    }

    #loaderDiv {
        display: flex;
        height: 72px;
        background-color: transparent;
        align-items: center;
        align-content: center;
        justify-content: center;
    }

    #container {
        max-width: 800px;
        display: flex;
        align-items: center;
    }

    #card {
        width: 100%;
        padding: 20px;
        border: 1px solid var(--Surface4);
        border-radius: 4px;
    }

    #buttonsDiv {
        margin-block: 8px;
        gap: 8px;
        margin-left: auto;
        display: flex;
        justify-content: flex-end;
    }

    #input {
        padding: 8px;
        border-radius: 4px;
        border: 2px solid var(--Surface4);
        background-color: transparent;
        width: 100%;
        resize: none;
        color: white;
        margin-right: 10px; /* Adds some spacing between the input and the button */
    }

    #result {
        background-color: var(--Surface3);
        color: white;
        min-height: 72px;
        margin-top: 10px;
        padding: 10px;
    }

    .primary-button {
        text-align: center;
        padding-block: 16px;
        padding-inline: 8px;
        border-width: 0;
        background-color: var(--Surface4);
        display: flex;
        align-items: center;
        justify-content: center;
    }

        .primary-button:active {
            background-color: var(--PrimaryAccent);
        }

        .primary-button:hover {
            background-color: var(--Primary);
        }

</style>

@code
{
    private bool IsProcessing { get; set; }

    private string? Result { get; set; } = null;

    private async Task OnTranslateButtonClicked()
    {
        IsProcessing = true;
        await ViewModel.RunAssistant();
        IsProcessing = false;
    }
}