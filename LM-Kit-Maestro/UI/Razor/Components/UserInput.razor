@inject IJSRuntime JS

<div id="chat-border" class="chat-border-small">
    <textarea rows="1" id="chat-box" @bind="Input" @onkeydown="OnKeyDown" @bind:event="oninput"/>

    <button disabled="@(InputIsEmpty && !ViewModel.AwaitingResponse)" @onclick="OnSendButtonClicked"
            class="send-button round-button @(InputIsEmpty && !ViewModel.AwaitingResponse ? "disabled-button" : "enabled-button")">
        @if (!ViewModel.AwaitingResponse)
        {
            <span>
                    <i class="fas fa-arrow-up"></i>
                </span>
        }
        else
        {
            <span>
                    <i class="fas fa-stop"></i>
                </span>
        }
    </button>
</div>

<style>
    
    body.mac #chat-border {
        max-width: 1000px;
    }

    body.windows #chat-border {
        max-width: 800px;
    }
    
    #chat-border {
        display: flex;
        position: relative;
        margin: 0;
        width: 100%;
        padding-block: 8px;
        background-color: var(--Surface);
        border: 2px solid var(--OutlineVariant);
        transition: border-color 0.3s;
        color: white;

    }

    .chat-border-small {
        border-radius : 32px;
    }

    .chat-border-large {
        border-radius: 16px;
    }

    #chat-box {
        color: var(--OnBackground);
        margin-block: auto;
        background-color: transparent;
        width: 100%;
        max-height: 200px;
        overflow-y: auto;
        border: none;
        outline: none;
        resize: none;
        padding-right: 40px;
        margin-left: 16px;
        margin-bottom: 0;
    }

    .chat-box:focus-within {
        border-color: var(--Primary);
    }

    #chat-box::-webkit-scrollbar {
        width: 8px;
    }

    #chat-box::-webkit-scrollbar-thumb {
        background-color: var(--Surface2);
        border-radius: 4px;
        border: 10px solid transparent;
    }

    #chat-box::-webkit-scrollbar-track {
        background-color: transparent;
    }

    #chat-box::-webkit-scrollbar-thumb:hover {
        background-color: var(--Surface3);
    }

    .send-button {
        position: absolute;
        right: 0;
        bottom: 6px; 
        margin-top: auto;
        margin-right: 8px;
        margin-left: auto;
        border: none;
        background-color: var(--Surface4);
        cursor: pointer;
        transition: background-color 0.3s;
    }

    body.mac .send-button {
        width: 40px;
        height:  40px;
    }
    
    body.windows .send-button {
        width: 32px;
        height:  32px;
    }

    .disabled-button {
        color: var(--Surface);
        cursor: not-allowed;
    }

    .enabled-button {
        color: var(--OnSurface);
    }

    /*     .send-button:hover:not(:disabled) {
    background-color: var(--OutlineVariant);
    } */
</style>

<script>

    document.getElementById('chat-box').addEventListener('keydown', function (e) {
        if (e.key == 'Enter' && !e.shiftKey) {
            // prevent default behavior
            e.preventDefault();
            return false;
        }
    }, false);

</script>

@code
{
    bool _inputIsEmpty = true;

    private bool InputIsEmpty
    {
        get => _inputIsEmpty;
        set
        {
            if (_inputIsEmpty != value)
            {
                _inputIsEmpty = value;
                StateHasChanged();
            }
        }
    }

    string? _input;

    private string? Input
    {
        get => _input;
        set
        {
            // if (_ignoreNextTextChange)
            // {
            //     _ignoreNextTextChange = false;
            // }
            // else
            {
                var _ = Task.Run(async () => { await JS.InvokeVoidAsync("resizeUserInput"); });

                if (_input != value)
                {
                    InputIsEmpty = string.IsNullOrWhiteSpace(value);
                    _input = value;
                    StateHasChanged();
                }
            }
        }
    }

    [Parameter] public EventCallback OnSubmit { get; set; }

    [Parameter] public required AssistantSessionViewModelBase ViewModel { get; set; }

    [Parameter] public EventCallback<AssistantSessionViewModelBase> ViewModelChanged { get; set; }

    private bool _ignoreNextTextChange = false;

    protected override void OnParametersSet()
    {
        base.OnParametersSet();

        ViewModel.PropertyChanged += (_, _) => InvokeAsync(() => StateHasChanged());
    }

    // protected override async Task OnAfterRenderAsync(bool firstRender)
    // {
    //     if (firstRender)
    //     {
    // await inputTextArea.FocusAsync();
    // await JS.InvokeVoidAsync("setUserInputFocus");
    //     }
    // }

    private async Task OnSendButtonClicked()
    {
        if (!ViewModel.AwaitingResponse)
        {
            Submit();
        }
        else
        {
            await ViewModel.Cancel();
        }
    }

    private async Task OnInputChange(ChangeEventArgs changeEventArgs)
    {
        await JS.InvokeVoidAsync("resizeUserInput", null);

        StateHasChanged();
    }

    private void OnKeyDown(KeyboardEventArgs keyboardEventArgs)
    {
        if (keyboardEventArgs.Key == "Enter")
        {
            if (!keyboardEventArgs.ShiftKey && !string.IsNullOrEmpty(Input))
            {
                Submit();
            }
        }
    }

    private void Submit()
    {
        ViewModel.InputText = Input;
        // _ignoreNextTextChange = true;
        ViewModel.Submit();
        Input = string.Empty;
        StateHasChanged();
    }
}
