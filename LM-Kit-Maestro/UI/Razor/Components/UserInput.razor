@inject IJSRuntime JS

<div id="chat-border" class="chat-border-small">
    <textarea rows="1" id="chat-box" @bind="ViewModel.InputText" @onkeydown="OnKeyDown" @bind:event="oninput" />

    <button disabled="@(!ViewModel.AwaitingResponse && !CanSubmit)" @onclick="OnSubmitButtonClicked"
            class="send-button round-button @(CanSubmit || ViewModel.AwaitingResponse ? "enabled-button" : "disabled-button")">
        @if (!ViewModel.AwaitingResponse)
        {
            <span>
                <i class="fas fa-arrow-up"></i>
            </span>
        }
        else
        {
            <span>
                <i class="fas fa-stop"></i>
            </span>
        }
    </button>
</div>

<style>

    body.mac #chat-border {
        max-width: 1000px;
    }

    body.windows #chat-border {
        max-width: 800px;
    }

    #chat-border {
        display: flex;
        position: relative;
        margin: 0;
        width: 100%;
        padding-block: 8px;
        background-color: var(--Surface);
        border: 2px solid var(--OutlineVariant);
        transition: border-color 0.3s;
        color: white;
    }

    .chat-border-small {
        border-radius: 32px;
    }

    .chat-border-large {
        border-radius: 16px;
    }

    #chat-box {
        color: var(--OnBackground);
        margin-block: auto;
        background-color: transparent;
        width: 100%;
        max-height: 200px;
        overflow-y: auto;
        border: none;
        outline: none;
        resize: none;
        padding-right: 40px;
        margin-left: 16px;
        margin-bottom: 0;
    }

    .chat-box:focus-within {
        border-color: var(--Primary);
    }

    #chat-box::-webkit-scrollbar {
        width: 8px;
    }

    #chat-box::-webkit-scrollbar-thumb {
        background-color: var(--Surface2);
        border-radius: 4px;
        border: 10px solid transparent;
    }

    #chat-box::-webkit-scrollbar-track {
        background-color: transparent;
    }

    #chat-box::-webkit-scrollbar-thumb:hover {
        background-color: var(--Surface3);
    }

    .send-button {
        position: absolute;
        right: 0;
        bottom: 6px;
        margin-top: auto;
        margin-right: 8px;
        margin-left: auto;
        border: none;
        background-color: var(--Surface4);
        cursor: pointer;
        transition: background-color 0.3s;
    }

    body.mac .send-button {
        width: 40px;
        height: 40px;
    }

    body.windows .send-button {
        width: 32px;
        height: 32px;
    }

    .disabled-button {
        color: var(--Surface);
        cursor: not-allowed;
    }

    .enabled-button {
        color: var(--OnSurface);
    }

    /*     .send-button:hover:not(:disabled) {
            background-color: var(--OutlineVariant);
            } */
</style>

<script>

    document.getElementById('chat-box').addEventListener('keydown', function (e) {
        if (e.key == 'Enter' && !e.shiftKey) {
            // prevent default behavior
            e.preventDefault();
            return false;
        }
    }, false);


        function resizeUserInput() {
            const chatBox = document.getElementById('chat-box');
            const chatBorder = document.getElementById('chat-border');


            chatBox.style.height = "";
            chatBox.style.height = chatBox.scrollHeight + "px";

            var style = window.getComputedStyle(chatBox);
            var lineHeight = parseFloat(style.getPropertyValue('line-height'));
            var lineCount = Math.round(chatBox.scrollHeight / lineHeight);

            // If the height exceeds max-height (200px), the scrollbar should appear.
            if (chatBox.scrollHeight > 200) {
                chatBox.style.height = "200px"; // Limit height to 200px
            } else {
                // Adding top and bottom margin depending on number of lines, to account for border radius of input box when showing scrollbar.
                if (lineCount > 2) {
                    chatBox.style.marginBottom = "16px";
                    chatBox.style.marginTop = "16px";
                } else if (lineCount > 1) {
                    chatBox.style.marginTop = "8px";
                    chatBox.style.marginBottom = "8px";

                } else {
                    chatBox.style.marginBottom = "0px";
                    chatBox.style.marginTop = "0px";
                }
            }


            if (lineCount > 1) {
                chatBorder.classList.add('chat-border-large');
                chatBorder.classList.remove('chat-border-small');
            } else {
                chatBorder.classList.add('chat-border-small');
                chatBorder.classList.remove('chat-border-large');
            }
        }
</script>

@code
{
    private bool _shouldResizeTextarea;

    bool _canSubmit;

    private bool CanSubmit
    {
        get => _canSubmit;
        set
        {
            if (_canSubmit != value)
            {
                _canSubmit = value;
                StateHasChanged();
            }
        }
    }

    [Parameter] public EventCallback OnSubmit { get; set; }

    [Parameter] public required AssistantViewModelBase ViewModel { get; set; }

    [Parameter] public EventCallback<AssistantViewModelBase> ViewModelChanged { get; set; }

    protected override void OnParametersSet()
    {
        base.OnParametersSet();

        ViewModel.PropertyChanged += OnViewModelPropertyChanged;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        // if (firstRender)
        // {
        //     await inputTextArea.FocusAsync();
        //     await JS.InvokeVoidAsync("setUserInputFocus");
        // }

        if (_shouldResizeTextarea)
        {
            _shouldResizeTextarea = false;
            await JS.InvokeVoidAsync("resizeUserInput");
        }
    }

    private async Task OnSubmitButtonClicked()
    {
        if (!ViewModel.AwaitingResponse)
        {
            if (CanSubmit)
            {
                Submit();
            }
        }
        else
        {
            await ViewModel.Cancel();
        }
    }

    private void OnKeyDown(KeyboardEventArgs keyboardEventArgs)
    {
        if (keyboardEventArgs.Key == "Enter")
        {
            if (!keyboardEventArgs.ShiftKey && CanSubmit)
            {
                Submit();
            }
        }
    }

    private void Submit()
    {
        ViewModel.Submit();
        StateHasChanged();
    }

    private void OnViewModelPropertyChanged(object? sender, PropertyChangedEventArgs e)
    {
        if (e.PropertyName == nameof(AssistantViewModelBase.InputText))
        {
            // Resize the textarea whenever the input text changes.
            _shouldResizeTextarea = true;
        }

        CanSubmit = !string.IsNullOrWhiteSpace(ViewModel.InputText) && !ViewModel.AwaitingResponse;
    }
}