@inject IJSRuntime JS

<div id="container">
    <div id="chat-border">
        <textarea @ref=inputTextArea rows="1"
                  @onkeypress="OnKeyPress"
                  @onkeydown="OnKeyDown"
                  @onkeyup="OnKeyUp"
                  @bind=ViewModel.InputText id="chat-box"
                  @oninput="OnInputChange"></textarea>

        <button @ref="sendButton"
                disabled="@(InputIsEmpty)"
                @onclick="OnSendButtonClicked" class="send-button">
            <i class="fas @(ViewModel.AwaitingResponse ?  "fa-stop" : "fa-arrow-up")"></i>
        </button>
    </div>
</div>

<style>
    #container {
        display: flex;
        justify-content: center;
    }

    #chat-border {
        display: flex;
        border-radius: 32px;
        margin: 0px;
        max-width: 800px;
        margin-bottom: 32px;
        width: 100%;
        padding-block: 8px;
        border: 1px solid var(--Background);
        background-color: var(--Surface);
        transition: border-color 0.3s;
        color: white;
    }

    .chat-border:focus-within {
        border-color: var(--Primary);
    }

    #chat-box {
        color: var(--OnBackgound);
        margin-block: auto;
        padding-inline: 20px;
        background-color: transparent;
        width: 100%;
        max-height: 200px;
        border: none;
        outline: none;
        resize: none;
    }

    /* Send button */
    .send-button {
        margin-top: auto;
        margin-left: auto;
        width: 32px;
        margin-right: 12px;
        height: 32px;
        font-size: 14px;
        border: none;
        border-radius: 50%;
        background-color: var(--Surface4);
        color: var(--OnSurface);
        cursor: pointer;
        transition: background-color 0.3s;
    }

        .send-button:disabled {
            color: var(--Surface);
            cursor: not-allowed;
        }

/*     .send-button:hover:not(:disabled) {
                                                background-color: var(--OutlineVariant);
                                            } */

    ::-webkit-scrollbar {
        width: 8px;
        height: 8px;
    }

    ::-webkit-scrollbar-thumb {
        background-color: var(--Surface3);
        border-radius: 0px;
        border: 3px solid transparent;
    }

    ::-webkit-scrollbar-track {
        background-color: transparent;
    }

    ::-webkit-scrollbar-thumb:hover {
        background-color: var(--Surface4);
    }
</style>

@code
{
    private bool _shiftIsPressed;

    private ElementReference inputTextArea;
    private ElementReference sendButton;

    bool _inputIsEmpty = true;
    private bool InputIsEmpty
    {
        get => _inputIsEmpty;
        set
        {
            if (_inputIsEmpty != value)
            {
                _inputIsEmpty = value;
                StateHasChanged();
            }
        }
    }

    [Parameter]
    public AssistantSessionViewModelBase? ViewModel { get; set; }

    [Parameter]
    public EventCallback<AssistantSessionViewModelBase?> ViewModelChanged { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await inputTextArea.FocusAsync();
            await JS.InvokeVoidAsync("setUserInputFocus");
        }
    }

    private void OnSendButtonClicked()
    {
        if (!ViewModel.AwaitingResponse)
        {
            ViewModel.Submit();
        }
        else
        {
            ViewModel.Cancel();
        }
    }

    private async Task OnInputChange(ChangeEventArgs changeEventArgs)
    {
        InputIsEmpty = string.IsNullOrEmpty((string?)changeEventArgs.Value);

        await JS.InvokeVoidAsync("resizeUserInput", null);

        StateHasChanged();
    }

    private void OnKeyUp(KeyboardEventArgs keyboardEventArgs)
    {
        if (keyboardEventArgs.Key == "Shift")
        {
            _shiftIsPressed = false;
        }
    }

    private void OnKeyDown(KeyboardEventArgs keyboardEventArgs)
    {
        if (keyboardEventArgs.Key == "Shift")
        {
            _shiftIsPressed = true;
        }
    }

    private void OnKeyPress(KeyboardEventArgs keyboardEventArgs)
    {
        if (keyboardEventArgs.Key == "Enter")
        {
            if (!_shiftIsPressed && !string.IsNullOrEmpty(ViewModel.InputText))
            {
                ViewModel.Submit();
            }
        }
    }
}