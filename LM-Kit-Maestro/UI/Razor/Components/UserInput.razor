@inject IJSRuntime JS

<div id="container">
    <div id="chat-border">
        <textarea rows="1" @bind=Input id="chat-box" @oninput="OnInputChange"></textarea>

        <button disabled="@(InputIsEmpty ? "disabled" : null)"
                @onclick="OnSendButtonClicked" class="send-button @(string.IsNullOrEmpty(Input) ? "send-button-disabled" : "send-button-enabled")">
            <i class="fas fa-arrow-up"></i>
        </button>
    </div>
</div>

<style>

    #container {
        display: flex;
        justify-content: center;
    }

    #chat-border {
        display: flex;
        border-radius: 32px;
        margin: 0px;
        max-width: 800px;
        margin-bottom: 32px;
        background-color: var(--Surface);
        transition: border-color 0.3s;
        width: 100%;
        padding-block: 8px;
        border: 1px solid var(--Background);
        background-color: var(--Surface);
        transition: border-color 0.3s;
    }

        .chat-border:focus-within {
            border-color: var(--Surface4);
        }

    #chat-box {
        color: var(--OnBackgound);
        margin-block: auto;
        padding-inline: 20px;
        background-color: transparent;
        width: 100%;
        max-height: 200px;
        border: none;
        outline: none;
        resize: none;
    }

    /* Send button */
    .send-button {
        margin-top: auto;
        margin-left: auto;
        width: 32px;
        margin-right: 12px;
        height: 32px;
        font-size: 14px;
        border: none;
        border-radius: 50%;
        background-color: var(--Surface4);
        color: var(--OnSurface);
        cursor: pointer;
        transition: background-color 0.3s;
    }

    .send-button-disabled {
        color: var(--Surface);
        cursor: not-allowed;
    }

    .send-button-enabled {
        color: var(--OnSurface);
    }
    /*     .send-button:hover:not(:disabled) {
                background-color: var(--OutlineVariant);
            } */

    ::-webkit-scrollbar {
        width: 8px;
        height: 8px;
    }

    ::-webkit-scrollbar-thumb {
        background-color: var(--Surface3);
        border-radius: 0px;
        border: 3px solid transparent;
    }

    ::-webkit-scrollbar-track {
        background-color: transparent;
    }

    ::-webkit-scrollbar-thumb:hover {
        background-color: var(--Surface4);
    }
</style>

@code
{
    bool _inputIsEmpty = true;
    private bool InputIsEmpty
    {
        get => _inputIsEmpty;
        set
        {
            if (_inputIsEmpty != value)
            {
                _inputIsEmpty = value;
                StateHasChanged();
            }
        }
    }

    string? _input;
    [Parameter]
    public string? Input
    {
        get => _input;
        set
        {
            if (_input != value)
            {
                _input = value;
                InputChanged?.InvokeAsync(value);
                InputIsEmpty = string.IsNullOrEmpty(_input);
                StateHasChanged();
            }
        }
    }

    [Parameter]
    public EventCallback<string?>? InputChanged { get; set; }

    [Parameter]
    public EventCallback ButtonClicked { get; set; }

    public event EventHandler? SendButtonClicked;

    private void OnSendButtonClicked()
    {
        SendButtonClicked?.Invoke(this, EventArgs.Empty);
        ButtonClicked.InvokeAsync();
    }

    private async Task OnInputChange(ChangeEventArgs changeEventArgs)
    {
        InputIsEmpty = string.IsNullOrEmpty((string?)changeEventArgs.Value);

        await JS.InvokeVoidAsync("resizeUserInput", null);

        StateHasChanged();
    }
}