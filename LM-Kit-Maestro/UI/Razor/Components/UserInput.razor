@inject IJSRuntime JS

<div id="container">
    <div id="chat-border">
        @*         @onkeypress="OnKeyPress"
        @onkeydown="OnKeyDown"
        @onkeyup="OnKeyUp" *@
        <textarea rows="1" id="chat-box" @bind="Input" @onkeydown="OnKeyDown" @bind:event="oninput"></textarea>


        <button
        @ref="sendButton"
        disabled="@(InputIsEmpty)"
        @onclick="OnSendButtonClicked"
        class="send-button @(InputIsEmpty && !ViewModel.AwaitingResponse ? "disabled-button" : "enabled-button")">
            <i class="fas @(ViewModel.AwaitingResponse ? "fa-stop" : "fa-arrow-up")" />
        </button>
    </div>
</div>

<style>
    #container {
        display: flex;
        justify-content: center;
    }

    #chat-border {
        display: flex;
        border-radius: 32px;
        margin: 0px;
        max-width: 800px;
        margin-bottom: 32px;
        width: 100%;
        padding-block: 8px;
        border: 1px solid var(--Background);
        background-color: var(--Surface);
        transition: border-color 0.3s;
        color: white;
    }

    .chat-border:focus-within {
        border-color: var(--Primary);
    }

    #chat-box {
        color: var(--OnBackground);
        margin-block: auto;
        padding-inline: 20px;
        background-color: transparent;
        width: 100%;
        max-height: 200px;
        overflow-y: auto;
        border: none;
        outline: none;
        resize: none;
    }

    /* Send button */
    .send-button {
    margin-top: auto;
    margin-left: auto;
    width: 32px;
    margin-right: 12px;
    height: 32px;
    font-size: 14px;
    border: none;
    border-radius: 50%;
    background-color: var(--Surface4);
    cursor: pointer;
    transition: background-color 0.3s;
    }

    .disabled-button {
    color: var(--Surface);
    cursor: not-allowed;
    }

    .enabled-button {
    color: var(--OnSurface);
    }

    /*     .send-button:hover:not(:disabled) {
        background-color: var(--OutlineVariant);
        } */

    ::-webkit-scrollbar {
        width: 8px;
        height: 8px;
    }

    ::-webkit-scrollbar-thumb {
    background-color: var(--Surface3);
    border-radius: 0px;
    border: 7px solid transparent;
    }

    ::-webkit-scrollbar-track {
        background-color: transparent;
    }

    ::-webkit-scrollbar-thumb:hover {
        background-color: var(--Surface4);
    }
</style>

<script>

    document.getElementById('chat-box').addEventListener('keydown', function (e) {
    if (e.key == 'Enter' && !e.shiftKey)
    {
      // prevent default behavior
      e.preventDefault();
      return false;
      }}, false);
</script>

@code
{
    bool _inputIsEmpty = true;
    private bool InputIsEmpty
    {
        get => _inputIsEmpty;
        set
        {
            if (_inputIsEmpty != value)
            {
                _inputIsEmpty = value;
                StateHasChanged();
            }
        }
    }

    string? _input;
    private string? Input
    {
        get => _input;
        set
        {
            // if (_ignoreNextTextChange)
            // {
            //     _ignoreNextTextChange = false;
            // }
            // else
            {
                var _ = Task.Run(async () =>
                {
                    await JS.InvokeVoidAsync("resizeUserInput");
                });

                if (_input != value)
                {
                    InputIsEmpty = string.IsNullOrEmpty(value);
                    _input = value;
                    StateHasChanged();
                }
            }
        }
    }

    [Parameter]
    public EventCallback OnSubmit { get; set; }

    [Parameter]
    public required AssistantSessionViewModelBase ViewModel { get; set; }

    [Parameter]
    public EventCallback<AssistantSessionViewModelBase> ViewModelChanged { get; set; }

    private bool _ignoreNextTextChange = false;

    protected override void OnParametersSet()
    {
        base.OnParametersSet();

        ViewModel.PropertyChanged += (_, _) => InvokeAsync(() => StateHasChanged());
    }

    // protected override async Task OnAfterRenderAsync(bool firstRender)
    // {
    //     if (firstRender)
    //     {
    // await inputTextArea.FocusAsync();
    // await JS.InvokeVoidAsync("setUserInputFocus");
    //     }
    // }

    private async Task OnSendButtonClicked()
    {
        if (!ViewModel.AwaitingResponse)
        {
            Submit();
        }
        else
        {
            await ViewModel.Cancel();
        }
    }

    private async Task OnInputChange(ChangeEventArgs changeEventArgs)
    {
        await JS.InvokeVoidAsync("resizeUserInput", null);

        StateHasChanged();
    }

    private void OnKeyDown(KeyboardEventArgs keyboardEventArgs)
    {
        if (keyboardEventArgs.Key == "Enter")
        {
            if (!keyboardEventArgs.ShiftKey && !string.IsNullOrEmpty(Input))
            {
                Submit();
            }
        }
    }

    private void Submit()
    {
        ViewModel.InputText = Input;
        // _ignoreNextTextChange = true;
        ViewModel.Submit();
        Input = string.Empty;
        StateHasChanged();
    }
}
